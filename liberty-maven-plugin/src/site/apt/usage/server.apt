 ------
 Server Goals Usage :: Liberty Plugin for Maven
 ------
 ------
 
Server Goals Usage

* Server install, start, stop, package, create

 Before the plugin can start or stop a server, it needs to know about the
 server assembly which it will install.
 
 This example shows start a pre-existing server, if so , you have to manually clean your server manually
 
+----------+
<plugin>
     <groupId>net.wasdev.wlp.maven.plugins</groupId>
     <artifactId>liberty-maven-plugin</artifactId>     
     <configuration>
        <serverHome>${project.build.directory}/wlp</serverHome>        
        <background>true</background>
        <serverName>test</serverName>
    </configuration>
</plugin>


+----------+

 This example shows install and start a server assembly archive, which will be used to install unless the
 <<<assemblyArchive>>> parameter has been set (see below section on <Installing an Assembly>).
 
 <<NOTE:>> Archive files <<MUST>> be a <<<ZIP>>> files (or be in the same format, like a <<<JAR>>>).
 
+----------+
<plugin>
    <groupId>net.wasdev.wlp.maven.plugins</groupId>
    <artifactId>liberty-maven-plugin</artifactId>    
    <configuration>
      <assemblyArchive>/path/to/server archive</assemblyArchive>  
    </configuration>
</plugin>
+----------+

 

* Starting Liberty Server

 Once you have configured an assembly (or assemblies with a default), then you can simply start the server. 

 If you have a pre-existing installed and you want to use that, you can set <<<serverHome>>>
 this will bypass any installation logic completely.

+----------+
 mvn liberty:start-server -DserverHome=/path/to/server expanded
+----------+

 Install and start a server zip
 
+----------+
mvn liberty:start-server -DassemblyArchive=/path/to/server archive.zip
+----------+

* Stopping Liberty Server

 To stop a server using the defaults, which is probably fine in most cases, just invoke the {{stop-server}} goal.

 Stopping a server does not require an assembly to be installed.

+----------+
mvn liberty:stop-server -DserverHome=/path/to/server
+----------+



* Start/Stop for Integration Testing

+----------+
<plugin>
    <groupId>net.wasdev.wlp.maven.plugins</groupId>
    <artifactId>liberty-maven-plugin</artifactId>  
    <executions>
        <execution>
            <id>start-server</id>
            <phase>pre-integration-test</phase>
            <goals>
                <goal>start-server</goal>
            </goals>
            <configuration>
                <serverHome>${project.build.directory}/was4d</serverHome>
            </configuration>
        </execution>
        
        <execution>
            <id>stop-server</id>
            <phase>post-integration-test</phase>
            <goals>
                <goal>stop-server</goal>
            </goals>
            <configuration>
                <serverHome>${project.build.directory}/was4d</serverHome>                
            </configuration>
        </execution>
    </executions>
</plugin>
+----------+

* Installing an Assembly

  To install a specific assembly archive, which need not be in the repository:

+----------+
mvn liberty:install-server -DassemblyArchive=/path/to/assembly.zip
+----------+

 For this to work, the file <<MUST>> be a <<<ZIP>>> (or be in the same format, like a <<<JAR>>>)
 and the archive should contain a full server assembly, specifically it needs to have a
 <<<lib/ws-launch.jar>>> entry.   This entry is used to discover <<<serverHome>>>.

 You can also change the base directory where the assembly is extracted to by setting
 the <<<installDirectory>>> parameter.  This is useful for a certain operating system
 that has a horribly small limit on the maximum size of a path name.

 <<NOTE:>> The directory structure of the archive is still preserved when it is extracted.

+----------+
mvn liberty:install-server -DinstallDirectory=/path/to/install -DassemblyArchive=/path/to/server archive
+----------+

* Package Server

 Package a stopped server, you can define packageFile attribute:

+----------+
<plugin>
    <groupId>net.wasdev.wlp.maven.plugins</groupId>
    <artifactId>liberty-maven-plugin</artifactId>  
    <executions>
                
        <execution>
            <id>package-server</id>
            <phase>post-integration-test</phase>
            <goals>
                <goal>package-server</goal>
            </goals>
            <configuration>
                <serverHome>${project.build.directory}/was4d</serverHome>
               <serverName>test</serverName>
              <packageFile>/path/to/packaged server file location</packageFile>
            </configuration>
        </execution>
    </executions>
</plugin>
+----------+

 You can also use maven command to package server
 
+----------+ 
 mvn liberty:package-server -DserverHome=/path/to/server -DpackageFile=/where/to/be packaged
+----------+

* Create Server

 Create a new server with serverName attribute:

+----------+
<plugin>
    <groupId>net.wasdev.wlp.maven.plugins</groupId>
    <artifactId>liberty-maven-plugin</artifactId>  
    <executions>
<execution>
                            <id>create-liberty-server</id>
                            <phase>pre-integration-test</phase>
                            <goals>
                                <goal>create-server</goal>
                            </goals>
                            <configuration>
<serverHome>${project.build.directory}/wlp</serverHome>                                
                                <serverName>testcreate</serverName>                                
                            </configuration>
                        </execution>     
</executions>
</plugin>   
+----------+

 You can can also use maven command to create a new server
 
+----------+
 mvn liberty:create-server -DserverHome=/path/to/server -DserverName=/server/name
+----------+
