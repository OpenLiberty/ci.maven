package net.wasdev.wlp.maven.test.app;

import static org.junit.Assert.*;


import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileReader;
import java.util.HashMap;
import java.util.Map;

import org.junit.Test;
import org.junit.Assert;

/**
 * 
 * MergeServerEnv
 * 
 */
public class MergeServerEnvTest {

    @Test
    public void testServerEnvFileExists() throws Exception {
        File f1 = new File("liberty/wlp/usr/servers/test", "server.env");
        assertTrue(f1.getCanonicalFile() + " doesn't exist", f1.exists());
    }

    /*
        # envProps in pom.xml
        <properties>
            <liberty.env.TEST_PROP_2>white</liberty.env.TEST_PROP_2>
            <liberty.env.CONFIG_SERVER_ENV_PROPS>TEST</liberty.env.CONFIG_SERVER_ENV_PROPS>
        </properties>
        
        # default server.env
        keystore_password=sfKRrA1ioLdtIFQC9bEfkua

        # Configured server.env
        CONFIG_SERVER_ENV=TEST
        TEST_PROP_2=green
        TEST_PROP_3=blue

        # server.env in configDir
        ConfigDir=TEST
        TEST_PROP_1=red
        TEST_PROP_2=red
        TEST_PROP_3=red

        # Merged server.env
        # Generated by liberty-gradle-plugin
        keystore_password=sfKRrA1ioLdtIFQC9bEfkua
        CONFIG_SERVER_ENV=TEST
        ConfigDir=TEST
        TEST_PROP_3=blue
        CONFIG_SERVER_ENV_PROPS=TEST
        TEST_PROP_2=white
        TEST_PROP_1=red
    */
    @Test
    public void check_server_env_contents() throws Exception {
        File serverEnv = new File("liberty/wlp/usr/servers/test", "server.env");
        FileInputStream input = new FileInputStream(serverEnv);
        
        Map<String,String> serverEnvContents = new HashMap<String,String>();

        BufferedReader bf = new BufferedReader(new FileReader(serverEnv));
        String line = bf.readLine();
        while(line != null) {
            //ignore comment lines
            if(!line.startsWith("#")) {
                String[] keyValuePair = line.split("=");
                String key = keyValuePair[0];
                String value = keyValuePair[1];

                serverEnvContents.put(key,value);
            }
            line = bf.readLine();
        }
        
        // The contents of the default server.env can change over time.
        // After 20.0.0.3, for example, the WLP_SKIP_MAXPERMSIZE was removed.
        // Just confirm the keystore_password is present to prove the default server.env was merged with the plugin config.
        Assert.assertTrue("Number of env properties should be >= 7, but is "+serverEnvContents.size(),  	serverEnvContents.size() >= 7);
        Assert.assertTrue("keystore_password mapping found", serverEnvContents.containsKey("keystore_password"));
        Assert.assertTrue("ConfigDir=TEST mapping found", serverEnvContents.get("ConfigDir").equals("TEST"));
        Assert.assertTrue("CONFIG_SERVER_ENV=TEST mapping found", serverEnvContents.get("CONFIG_SERVER_ENV").equals("TEST"));
        Assert.assertTrue("TEST_PROP_3=blue", serverEnvContents.get("TEST_PROP_3").equals("blue"));
        Assert.assertTrue("CONFIG_SERVER_ENV_PROPS=TEST", serverEnvContents.get("CONFIG_SERVER_ENV_PROPS").equals("TEST"));
        Assert.assertTrue("TEST_PROP_2=white", serverEnvContents.get("TEST_PROP_2").equals("white"));
        Assert.assertTrue("TEST_PROP_1=red", serverEnvContents.get("TEST_PROP_1").equals("red"));

    }

}
